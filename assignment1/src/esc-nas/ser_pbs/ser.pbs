#!/bin/bash
#PBS -l nodes=1:ppn=32:r641
#PBS -l walltime=02:00:00
#PBS -V

if [[ $compiler = "intelO3" ]];
then
	echo "compiler 1"
	source /share/apps/intel/parallel_studio_xe_2019/compilers_and_libraries_2019/linux/bin/compilervars.sh intel64
	module load gcc/5.3.0

elif [[ $compiler = "intelO2" ]];
then
	echo "compiler 2"
	source /share/apps/intel/parallel_studio_xe_2019/compilers_and_libraries_2019/linux/bin/compilervars.sh intel64
	module load gcc/5.3.0

elif [[ $compiler = "intelO1" ]];
then
	echo "compiler 3"
	source /share/apps/intel/parallel_studio_xe_2019/compilers_and_libraries_2019/linux/bin/compilervars.sh intel64
	module load gcc/5.3.0

elif [[ $compiler = "gnuO3" ]];
then
	echo "compiler 4"
	module load gcc/$version

elif [[ $compiler = "gnuO2" ]];
then
	echo "compiler 5"
	module load gcc/$version
	
	
elif [[ $compiler = "gnuO1" ]]
then
	echo "compiler 6"
	module load gcc/$version

fi
	
echo $compiler.$version

cd esc-nas

#cp config/NAS.samples/suite.def.is config/suite.def
#cp config/NAS.samples/make.def.gcc_x86 config/make.def

##repetitions=1
##tests=5

#define file name and executable
##test_file="is_D_gnuO1"
##test_exe="is.D.x"

cpu="tests/ser/cpu/$test_file.txt"
memory="tests/ser/memory/$test_file.txt"
io="tests/ser/io/$test_file.txt"

sar 1 >> $cpu &
sar -r 1 >> $memory &
sar -b 1 >> $io &

for((d = 0; d < tests; d++))
do
	for((i = 0; i < repetitions; i++))
	do
		./NPB3.3.1/NPB3.3-SER/$compiler.$version/$test_exe
	done
	
	echo "#test $d" >> $cpu
	echo "#test $d" >> $memory
	echo "#test $d" >> $io
	
done

