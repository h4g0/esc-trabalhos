<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>perf_evlist__prepare_workload (1 samples, 0.67%)</title><rect x="1150.4" y="405" width="7.9" height="15.0" fill="rgb(254,184,3)" rx="2" ry="2" />
<text  x="1153.40" y="415.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 2.68%)</title><rect x="1118.7" y="149" width="31.7" height="15.0" fill="rgb(238,19,5)" rx="2" ry="2" />
<text  x="1121.72" y="159.5" >in..</text>
</g>
<g >
<title>rpc_wait_bit_killable (1 samples, 0.67%)</title><rect x="1150.4" y="69" width="7.9" height="15.0" fill="rgb(215,61,38)" rx="2" ry="2" />
<text  x="1153.40" y="79.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 2.68%)</title><rect x="1158.3" y="245" width="31.7" height="15.0" fill="rgb(230,182,21)" rx="2" ry="2" />
<text  x="1161.32" y="255.5" >x8..</text>
</g>
<g >
<title>perf_event_enable (5 samples, 3.36%)</title><rect x="1110.8" y="293" width="39.6" height="15.0" fill="rgb(253,41,15)" rx="2" ry="2" />
<text  x="1113.81" y="303.5" >per..</text>
</g>
<g >
<title>menu_select (1 samples, 0.67%)</title><rect x="889.1" y="421" width="7.9" height="15.0" fill="rgb(207,66,52)" rx="2" ry="2" />
<text  x="892.06" y="431.5" ></text>
</g>
<g >
<title>cmd_record (6 samples, 4.03%)</title><rect x="1110.8" y="421" width="47.5" height="15.0" fill="rgb(226,111,7)" rx="2" ry="2" />
<text  x="1113.81" y="431.5" >cmd_..</text>
</g>
<g >
<title>cpuidle_idle_call (113 samples, 75.84%)</title><rect x="10.0" y="437" width="894.9" height="15.0" fill="rgb(226,78,11)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >cpuidle_idle_call</text>
</g>
<g >
<title>run_builtin (6 samples, 4.03%)</title><rect x="1110.8" y="437" width="47.5" height="15.0" fill="rgb(221,90,19)" rx="2" ry="2" />
<text  x="1113.81" y="447.5" >run_..</text>
</g>
<g >
<title>enqueue_hrtimer (1 samples, 0.67%)</title><rect x="49.6" y="357" width="7.9" height="15.0" fill="rgb(206,104,1)" rx="2" ry="2" />
<text  x="52.60" y="367.5" ></text>
</g>
<g >
<title>hrtimer_run_pending (1 samples, 0.67%)</title><rect x="73.4" y="325" width="7.9" height="15.0" fill="rgb(231,87,12)" rx="2" ry="2" />
<text  x="76.36" y="335.5" ></text>
</g>
<g >
<title>sys_execve (1 samples, 0.67%)</title><rect x="1150.4" y="357" width="7.9" height="15.0" fill="rgb(208,114,33)" rx="2" ry="2" />
<text  x="1153.40" y="367.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.67%)</title><rect x="1102.9" y="357" width="7.9" height="15.0" fill="rgb(241,184,7)" rx="2" ry="2" />
<text  x="1105.89" y="367.5" ></text>
</g>
<g >
<title>perf (7 samples, 4.70%)</title><rect x="1102.9" y="485" width="55.4" height="15.0" fill="rgb(212,89,3)" rx="2" ry="2" />
<text  x="1105.89" y="495.5" >perf</text>
</g>
<g >
<title>__perf_event_enable (4 samples, 2.68%)</title><rect x="1158.3" y="309" width="31.7" height="15.0" fill="rgb(253,168,40)" rx="2" ry="2" />
<text  x="1161.32" y="319.5" >__..</text>
</g>
<g >
<title>system_call_fastpath (5 samples, 3.36%)</title><rect x="1110.8" y="389" width="39.6" height="15.0" fill="rgb(231,94,14)" rx="2" ry="2" />
<text  x="1113.81" y="399.5" >sys..</text>
</g>
<g >
<title>flush_old_exec (1 samples, 0.67%)</title><rect x="1102.9" y="373" width="7.9" height="15.0" fill="rgb(222,97,27)" rx="2" ry="2" />
<text  x="1105.89" y="383.5" ></text>
</g>
<g >
<title>__perf_event_enable (88 samples, 59.06%)</title><rect x="105.0" y="357" width="696.9" height="15.0" fill="rgb(226,31,36)" rx="2" ry="2" />
<text  x="108.03" y="367.5" >__perf_event_enable</text>
</g>
<g >
<title>__perf_event_enable (4 samples, 2.68%)</title><rect x="1118.7" y="245" width="31.7" height="15.0" fill="rgb(231,53,54)" rx="2" ry="2" />
<text  x="1121.72" y="255.5" >__..</text>
</g>
<g >
<title>kcs_event (3 samples, 2.01%)</title><rect x="920.7" y="405" width="23.8" height="15.0" fill="rgb(244,140,3)" rx="2" ry="2" />
<text  x="923.74" y="415.5" >k..</text>
</g>
<g >
<title>perf_pmu_enable (88 samples, 59.06%)</title><rect x="105.0" y="309" width="696.9" height="15.0" fill="rgb(217,147,35)" rx="2" ry="2" />
<text  x="108.03" y="319.5" >perf_pmu_enable</text>
</g>
<g >
<title>save_args (1 samples, 0.67%)</title><rect x="897.0" y="421" width="7.9" height="15.0" fill="rgb(223,34,41)" rx="2" ry="2" />
<text  x="899.98" y="431.5" ></text>
</g>
<g >
<title>tick_program_event (1 samples, 0.67%)</title><rect x="65.4" y="373" width="8.0" height="15.0" fill="rgb(230,215,15)" rx="2" ry="2" />
<text  x="68.44" y="383.5" ></text>
</g>
<g >
<title>main (6 samples, 4.03%)</title><rect x="1110.8" y="453" width="47.5" height="15.0" fill="rgb(214,197,42)" rx="2" ry="2" />
<text  x="1113.81" y="463.5" >main</text>
</g>
<g >
<title>rpc_call_sync (1 samples, 0.67%)</title><rect x="1150.4" y="165" width="7.9" height="15.0" fill="rgb(217,109,33)" rx="2" ry="2" />
<text  x="1153.40" y="175.5" ></text>
</g>
<g >
<title>sys_ioctl (5 samples, 3.36%)</title><rect x="1110.8" y="373" width="39.6" height="15.0" fill="rgb(246,212,38)" rx="2" ry="2" />
<text  x="1113.81" y="383.5" >sys..</text>
</g>
<g >
<title>ktime_get (1 samples, 0.67%)</title><rect x="65.4" y="357" width="8.0" height="15.0" fill="rgb(227,171,1)" rx="2" ry="2" />
<text  x="68.44" y="367.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (4 samples, 2.68%)</title><rect x="1158.3" y="341" width="31.7" height="15.0" fill="rgb(234,131,29)" rx="2" ry="2" />
<text  x="1161.32" y="351.5" >ge..</text>
</g>
<g >
<title>update_process_times (1 samples, 0.67%)</title><rect x="57.5" y="341" width="7.9" height="15.0" fill="rgb(237,129,3)" rx="2" ry="2" />
<text  x="60.52" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_commit_txn (4 samples, 2.68%)</title><rect x="1118.7" y="213" width="31.7" height="15.0" fill="rgb(210,57,47)" rx="2" ry="2" />
<text  x="1121.72" y="223.5" >x8..</text>
</g>
<g >
<title>sys_execve (1 samples, 0.67%)</title><rect x="1102.9" y="437" width="7.9" height="15.0" fill="rgb(229,222,31)" rx="2" ry="2" />
<text  x="1105.89" y="447.5" ></text>
</g>
<g >
<title>child_rip (4 samples, 2.68%)</title><rect x="912.8" y="469" width="31.7" height="15.0" fill="rgb(229,46,45)" rx="2" ry="2" />
<text  x="915.82" y="479.5" >ch..</text>
</g>
<g >
<title>ksoftirqd (1 samples, 0.67%)</title><rect x="944.5" y="437" width="7.9" height="15.0" fill="rgb(247,10,21)" rx="2" ry="2" />
<text  x="947.50" y="447.5" ></text>
</g>
<g >
<title>__nfs_revalidate_inode (1 samples, 0.67%)</title><rect x="1150.4" y="213" width="7.9" height="15.0" fill="rgb(234,81,4)" rx="2" ry="2" />
<text  x="1153.40" y="223.5" ></text>
</g>
<g >
<title>__rcu_process_callbacks (1 samples, 0.67%)</title><rect x="81.3" y="309" width="7.9" height="15.0" fill="rgb(226,101,1)" rx="2" ry="2" />
<text  x="84.28" y="319.5" ></text>
</g>
<g >
<title>remote_function (4 samples, 2.68%)</title><rect x="1118.7" y="261" width="31.7" height="15.0" fill="rgb(224,59,38)" rx="2" ry="2" />
<text  x="1121.72" y="271.5" >re..</text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.67%)</title><rect x="57.5" y="325" width="7.9" height="15.0" fill="rgb(205,119,20)" rx="2" ry="2" />
<text  x="60.52" y="335.5" ></text>
</g>
<g >
<title>all (149 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(243,48,17)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>irq_exit (4 samples, 2.68%)</title><rect x="73.4" y="389" width="31.6" height="15.0" fill="rgb(219,13,4)" rx="2" ry="2" />
<text  x="76.36" y="399.5" >ir..</text>
</g>
<g >
<title>perf_event_for_each_child (5 samples, 3.36%)</title><rect x="1110.8" y="309" width="39.6" height="15.0" fill="rgb(221,142,10)" rx="2" ry="2" />
<text  x="1113.81" y="319.5" >per..</text>
</g>
<g >
<title>update_shares (1 samples, 0.67%)</title><rect x="944.5" y="357" width="7.9" height="15.0" fill="rgb(229,17,10)" rx="2" ry="2" />
<text  x="947.50" y="367.5" ></text>
</g>
<g >
<title>x86_pmu_commit_txn (4 samples, 2.68%)</title><rect x="1158.3" y="277" width="31.7" height="15.0" fill="rgb(224,112,32)" rx="2" ry="2" />
<text  x="1161.32" y="287.5" >x8..</text>
</g>
<g >
<title>exit_mmap (1 samples, 0.67%)</title><rect x="1102.9" y="341" width="7.9" height="15.0" fill="rgb(244,113,39)" rx="2" ry="2" />
<text  x="1105.89" y="351.5" ></text>
</g>
<g >
<title>stub_execve (1 samples, 0.67%)</title><rect x="1102.9" y="453" width="7.9" height="15.0" fill="rgb(208,115,46)" rx="2" ry="2" />
<text  x="1105.89" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.67%)</title><rect x="81.3" y="325" width="7.9" height="15.0" fill="rgb(249,27,37)" rx="2" ry="2" />
<text  x="84.28" y="335.5" ></text>
</g>
<g >
<title>tick_nohz_restart_sched_tick (1 samples, 0.67%)</title><rect x="904.9" y="453" width="7.9" height="15.0" fill="rgb(212,196,46)" rx="2" ry="2" />
<text  x="907.90" y="463.5" ></text>
</g>
<g >
<title>rb_insert_color (1 samples, 0.67%)</title><rect x="49.6" y="341" width="7.9" height="15.0" fill="rgb(223,216,33)" rx="2" ry="2" />
<text  x="52.60" y="351.5" ></text>
</g>
<g >
<title>remote_function (4 samples, 2.68%)</title><rect x="1158.3" y="325" width="31.7" height="15.0" fill="rgb(236,178,7)" rx="2" ry="2" />
<text  x="1161.32" y="335.5" >re..</text>
</g>
<g >
<title>__libc_start_main (6 samples, 4.03%)</title><rect x="1110.8" y="469" width="47.5" height="15.0" fill="rgb(225,31,37)" rx="2" ry="2" />
<text  x="1113.81" y="479.5" >__li..</text>
</g>
<g >
<title>x86_pmu_commit_txn (88 samples, 59.06%)</title><rect x="105.0" y="325" width="696.9" height="15.0" fill="rgb(222,49,21)" rx="2" ry="2" />
<text  x="108.03" y="335.5" >x86_pmu_commit_txn</text>
</g>
<g >
<title>smp_call_function_single_interrupt (88 samples, 59.06%)</title><rect x="105.0" y="405" width="696.9" height="15.0" fill="rgb(206,109,37)" rx="2" ry="2" />
<text  x="108.03" y="415.5" >smp_call_function_single_interrupt</text>
</g>
<g >
<title>cpuidle_idle_call (4 samples, 2.68%)</title><rect x="1158.3" y="389" width="31.7" height="15.0" fill="rgb(208,145,45)" rx="2" ry="2" />
<text  x="1161.32" y="399.5" >cp..</text>
</g>
<g >
<title>__GI___ioctl (5 samples, 3.36%)</title><rect x="1110.8" y="405" width="39.6" height="15.0" fill="rgb(234,119,42)" rx="2" ry="2" />
<text  x="1113.81" y="415.5" >__G..</text>
</g>
<g >
<title>check_for_new_grace_period (1 samples, 0.67%)</title><rect x="81.3" y="293" width="7.9" height="15.0" fill="rgb(207,70,4)" rx="2" ry="2" />
<text  x="84.28" y="303.5" ></text>
</g>
<g >
<title>perf_pmu_enable (4 samples, 2.68%)</title><rect x="1158.3" y="261" width="31.7" height="15.0" fill="rgb(254,151,20)" rx="2" ry="2" />
<text  x="1161.32" y="271.5" >pe..</text>
</g>
<g >
<title>__run_hrtimer (2 samples, 1.34%)</title><rect x="49.6" y="373" width="15.8" height="15.0" fill="rgb(224,107,44)" rx="2" ry="2" />
<text  x="52.60" y="383.5" ></text>
</g>
<g >
<title>ksoftirqd/0 (1 samples, 0.67%)</title><rect x="944.5" y="485" width="7.9" height="15.0" fill="rgb(220,211,31)" rx="2" ry="2" />
<text  x="947.50" y="495.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.67%)</title><rect x="944.5" y="389" width="7.9" height="15.0" fill="rgb(233,190,40)" rx="2" ry="2" />
<text  x="947.50" y="399.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (4 samples, 2.68%)</title><rect x="1158.3" y="357" width="31.7" height="15.0" fill="rgb(222,24,21)" rx="2" ry="2" />
<text  x="1161.32" y="367.5" >sm..</text>
</g>
<g >
<title>__do_softirq (1 samples, 0.67%)</title><rect x="944.5" y="405" width="7.9" height="15.0" fill="rgb(216,135,11)" rx="2" ry="2" />
<text  x="947.50" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (12 samples, 8.05%)</title><rect x="10.0" y="421" width="95.0" height="15.0" fill="rgb(230,36,40)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >apic_timer_..</text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.67%)</title><rect x="1102.9" y="405" width="7.9" height="15.0" fill="rgb(251,49,40)" rx="2" ry="2" />
<text  x="1105.89" y="415.5" ></text>
</g>
<g >
<title>start_secondary (114 samples, 76.51%)</title><rect x="10.0" y="469" width="902.8" height="15.0" fill="rgb(222,155,49)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >start_secondary</text>
</g>
<g >
<title>kthread (1 samples, 0.67%)</title><rect x="944.5" y="453" width="7.9" height="15.0" fill="rgb(234,36,6)" rx="2" ry="2" />
<text  x="947.50" y="463.5" ></text>
</g>
<g >
<title>group_sched_in (4 samples, 2.68%)</title><rect x="1158.3" y="293" width="31.7" height="15.0" fill="rgb(235,117,42)" rx="2" ry="2" />
<text  x="1161.32" y="303.5" >gr..</text>
</g>
<g >
<title>thread_return (1 samples, 0.67%)</title><rect x="1150.4" y="53" width="7.9" height="15.0" fill="rgb(228,151,4)" rx="2" ry="2" />
<text  x="1153.40" y="63.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (7 samples, 4.70%)</title><rect x="17.9" y="389" width="55.5" height="15.0" fill="rgb(216,140,42)" rx="2" ry="2" />
<text  x="20.92" y="399.5" >hrtim..</text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.67%)</title><rect x="1150.4" y="37" width="7.9" height="15.0" fill="rgb(254,43,12)" rx="2" ry="2" />
<text  x="1153.40" y="47.5" ></text>
</g>
<g >
<title>swapper (4 samples, 2.68%)</title><rect x="1158.3" y="485" width="31.7" height="15.0" fill="rgb(230,47,2)" rx="2" ry="2" />
<text  x="1161.32" y="495.5" >sw..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (11 samples, 7.38%)</title><rect x="17.9" y="405" width="87.1" height="15.0" fill="rgb(205,133,14)" rx="2" ry="2" />
<text  x="20.92" y="415.5" >smp_apic_t..</text>
</g>
<g >
<title>call_softirq (4 samples, 2.68%)</title><rect x="73.4" y="357" width="31.6" height="15.0" fill="rgb(219,1,2)" rx="2" ry="2" />
<text  x="76.36" y="367.5" >ca..</text>
</g>
<g >
<title>intel_pmu_nhm_enable_all (4 samples, 2.68%)</title><rect x="1158.3" y="229" width="31.7" height="15.0" fill="rgb(230,201,9)" rx="2" ry="2" />
<text  x="1161.32" y="239.5" >in..</text>
</g>
<g >
<title>path_walk (1 samples, 0.67%)</title><rect x="1150.4" y="277" width="7.9" height="15.0" fill="rgb(230,195,30)" rx="2" ry="2" />
<text  x="1153.40" y="287.5" ></text>
</g>
<g >
<title>__wait_on_bit (1 samples, 0.67%)</title><rect x="1150.4" y="85" width="7.9" height="15.0" fill="rgb(216,82,16)" rx="2" ry="2" />
<text  x="1153.40" y="95.5" ></text>
</g>
<g >
<title>__rpc_execute (1 samples, 0.67%)</title><rect x="1150.4" y="117" width="7.9" height="15.0" fill="rgb(207,21,47)" rx="2" ry="2" />
<text  x="1153.40" y="127.5" ></text>
</g>
<g >
<title>init (114 samples, 76.51%)</title><rect x="10.0" y="485" width="902.8" height="15.0" fill="rgb(248,65,17)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >init</text>
</g>
<g >
<title>vfs_ioctl (5 samples, 3.36%)</title><rect x="1110.8" y="341" width="39.6" height="15.0" fill="rgb(240,131,10)" rx="2" ry="2" />
<text  x="1113.81" y="351.5" >vfs..</text>
</g>
<g >
<title>do_lookup (1 samples, 0.67%)</title><rect x="1150.4" y="245" width="7.9" height="15.0" fill="rgb(245,115,19)" rx="2" ry="2" />
<text  x="1153.40" y="255.5" ></text>
</g>
<g >
<title>cpu_idle (4 samples, 2.68%)</title><rect x="1158.3" y="405" width="31.7" height="15.0" fill="rgb(206,221,33)" rx="2" ry="2" />
<text  x="1161.32" y="415.5" >cp..</text>
</g>
<g >
<title>native_write_msr_safe (4 samples, 2.68%)</title><rect x="1118.7" y="133" width="31.7" height="15.0" fill="rgb(210,172,0)" rx="2" ry="2" />
<text  x="1121.72" y="143.5" >na..</text>
</g>
<g >
<title>stub_execve (1 samples, 0.67%)</title><rect x="1150.4" y="373" width="7.9" height="15.0" fill="rgb(226,29,5)" rx="2" ry="2" />
<text  x="1153.40" y="383.5" ></text>
</g>
<g >
<title>naive (19 samples, 12.75%)</title><rect x="952.4" y="485" width="150.5" height="15.0" fill="rgb(234,136,22)" rx="2" ry="2" />
<text  x="955.42" y="495.5" >naive</text>
</g>
<g >
<title>do_vfs_ioctl (5 samples, 3.36%)</title><rect x="1110.8" y="357" width="39.6" height="15.0" fill="rgb(224,192,36)" rx="2" ry="2" />
<text  x="1113.81" y="367.5" >do_..</text>
</g>
<g >
<title>__link_path_walk (1 samples, 0.67%)</title><rect x="1150.4" y="261" width="7.9" height="15.0" fill="rgb(241,50,8)" rx="2" ry="2" />
<text  x="1153.40" y="271.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (4 samples, 2.68%)</title><rect x="1158.3" y="469" width="31.7" height="15.0" fill="rgb(241,20,4)" rx="2" ry="2" />
<text  x="1161.32" y="479.5" >x8..</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 2.68%)</title><rect x="1118.7" y="181" width="31.7" height="15.0" fill="rgb(218,34,44)" rx="2" ry="2" />
<text  x="1121.72" y="191.5" >x8..</text>
</g>
<g >
<title>kthread (4 samples, 2.68%)</title><rect x="912.8" y="453" width="31.7" height="15.0" fill="rgb(217,31,47)" rx="2" ry="2" />
<text  x="915.82" y="463.5" >kt..</text>
</g>
<g >
<title>native_write_msr_safe (4 samples, 2.68%)</title><rect x="1158.3" y="197" width="31.7" height="15.0" fill="rgb(218,152,21)" rx="2" ry="2" />
<text  x="1161.32" y="207.5" >na..</text>
</g>
<g >
<title>intel_pmu_enable_all (84 samples, 56.38%)</title><rect x="120.9" y="261" width="665.2" height="15.0" fill="rgb(234,55,1)" rx="2" ry="2" />
<text  x="123.87" y="271.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>schedule (1 samples, 0.67%)</title><rect x="912.8" y="421" width="7.9" height="15.0" fill="rgb(208,1,34)" rx="2" ry="2" />
<text  x="915.82" y="431.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 2.68%)</title><rect x="1158.3" y="213" width="31.7" height="15.0" fill="rgb(211,5,35)" rx="2" ry="2" />
<text  x="1161.32" y="223.5" >in..</text>
</g>
<g >
<title>cpu_idle (113 samples, 75.84%)</title><rect x="10.0" y="453" width="894.9" height="15.0" fill="rgb(221,218,34)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >cpu_idle</text>
</g>
<g >
<title>do_path_lookup (1 samples, 0.67%)</title><rect x="1150.4" y="293" width="7.9" height="15.0" fill="rgb(211,202,41)" rx="2" ry="2" />
<text  x="1153.40" y="303.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (4 samples, 2.68%)</title><rect x="1158.3" y="453" width="31.7" height="15.0" fill="rgb(213,64,4)" rx="2" ry="2" />
<text  x="1161.32" y="463.5" >x8..</text>
</g>
<g >
<title>intel_pmu_nhm_enable_all (88 samples, 59.06%)</title><rect x="105.0" y="277" width="696.9" height="15.0" fill="rgb(254,17,44)" rx="2" ry="2" />
<text  x="108.03" y="287.5" >intel_pmu_nhm_enable_all</text>
</g>
<g >
<title>nfs3_proc_getattr (1 samples, 0.67%)</title><rect x="1150.4" y="197" width="7.9" height="15.0" fill="rgb(218,0,8)" rx="2" ry="2" />
<text  x="1153.40" y="207.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.67%)</title><rect x="1102.9" y="325" width="7.9" height="15.0" fill="rgb(254,30,9)" rx="2" ry="2" />
<text  x="1105.89" y="335.5" ></text>
</g>
<g >
<title>__execve (1 samples, 0.67%)</title><rect x="1150.4" y="389" width="7.9" height="15.0" fill="rgb(235,132,53)" rx="2" ry="2" />
<text  x="1153.40" y="399.5" ></text>
</g>
<g >
<title>multiply_matrices (19 samples, 12.75%)</title><rect x="952.4" y="469" width="150.5" height="15.0" fill="rgb(212,183,7)" rx="2" ry="2" />
<text  x="955.42" y="479.5" >multiply_matrices</text>
</g>
<g >
<title>perf_ioctl (5 samples, 3.36%)</title><rect x="1110.8" y="325" width="39.6" height="15.0" fill="rgb(230,108,5)" rx="2" ry="2" />
<text  x="1113.81" y="335.5" >per..</text>
</g>
<g >
<title>x86_pmu_enable (88 samples, 59.06%)</title><rect x="105.0" y="293" width="696.9" height="15.0" fill="rgb(208,26,21)" rx="2" ry="2" />
<text  x="108.03" y="303.5" >x86_pmu_enable</text>
</g>
<g >
<title>smi_event_handler (3 samples, 2.01%)</title><rect x="920.7" y="421" width="23.8" height="15.0" fill="rgb(240,197,0)" rx="2" ry="2" />
<text  x="923.74" y="431.5" >s..</text>
</g>
<g >
<title>call_function_single_interrupt (88 samples, 59.06%)</title><rect x="105.0" y="421" width="696.9" height="15.0" fill="rgb(228,228,6)" rx="2" ry="2" />
<text  x="108.03" y="431.5" >call_function_single_interrupt</text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.67%)</title><rect x="97.1" y="341" width="7.9" height="15.0" fill="rgb(248,54,48)" rx="2" ry="2" />
<text  x="100.11" y="351.5" ></text>
</g>
<g >
<title>do_execve (1 samples, 0.67%)</title><rect x="1102.9" y="421" width="7.9" height="15.0" fill="rgb(239,179,21)" rx="2" ry="2" />
<text  x="1105.89" y="431.5" ></text>
</g>
<g >
<title>rpc_execute (1 samples, 0.67%)</title><rect x="1150.4" y="133" width="7.9" height="15.0" fill="rgb(211,173,30)" rx="2" ry="2" />
<text  x="1153.40" y="143.5" ></text>
</g>
<g >
<title>kipmi0 (4 samples, 2.68%)</title><rect x="912.8" y="485" width="31.7" height="15.0" fill="rgb(216,49,34)" rx="2" ry="2" />
<text  x="915.82" y="495.5" >ki..</text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.67%)</title><rect x="57.5" y="357" width="7.9" height="15.0" fill="rgb(226,190,49)" rx="2" ry="2" />
<text  x="60.52" y="367.5" ></text>
</g>
<g >
<title>remote_function (88 samples, 59.06%)</title><rect x="105.0" y="373" width="696.9" height="15.0" fill="rgb(234,49,26)" rx="2" ry="2" />
<text  x="108.03" y="383.5" >remote_function</text>
</g>
<g >
<title>__execve (1 samples, 0.67%)</title><rect x="1102.9" y="469" width="7.9" height="15.0" fill="rgb(206,122,12)" rx="2" ry="2" />
<text  x="1105.89" y="479.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.67%)</title><rect x="89.2" y="325" width="7.9" height="15.0" fill="rgb(236,164,4)" rx="2" ry="2" />
<text  x="92.19" y="335.5" ></text>
</g>
<g >
<title>__do_softirq (3 samples, 2.01%)</title><rect x="73.4" y="341" width="23.7" height="15.0" fill="rgb(244,87,28)" rx="2" ry="2" />
<text  x="76.36" y="351.5" >_..</text>
</g>
<g >
<title>native_write_msr_safe (2 samples, 1.34%)</title><rect x="786.1" y="261" width="15.8" height="15.0" fill="rgb(216,154,39)" rx="2" ry="2" />
<text  x="789.11" y="271.5" ></text>
</g>
<g >
<title>out_of_line_wait_on_bit (1 samples, 0.67%)</title><rect x="1150.4" y="101" width="7.9" height="15.0" fill="rgb(214,94,19)" rx="2" ry="2" />
<text  x="1153.40" y="111.5" ></text>
</g>
<g >
<title>rpc_run_task (1 samples, 0.67%)</title><rect x="1150.4" y="149" width="7.9" height="15.0" fill="rgb(238,209,31)" rx="2" ry="2" />
<text  x="1153.40" y="159.5" ></text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.67%)</title><rect x="1110.8" y="261" width="7.9" height="15.0" fill="rgb(232,3,26)" rx="2" ry="2" />
<text  x="1113.81" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_single (5 samples, 3.36%)</title><rect x="1110.8" y="277" width="39.6" height="15.0" fill="rgb(233,39,19)" rx="2" ry="2" />
<text  x="1113.81" y="287.5" >smp..</text>
</g>
<g >
<title>nfs3_rpc_wrapper.clone.0 (1 samples, 0.67%)</title><rect x="1150.4" y="181" width="7.9" height="15.0" fill="rgb(216,14,20)" rx="2" ry="2" />
<text  x="1153.40" y="191.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.67%)</title><rect x="912.8" y="405" width="7.9" height="15.0" fill="rgb(210,207,35)" rx="2" ry="2" />
<text  x="915.82" y="415.5" ></text>
</g>
<g >
<title>intel_pmu_nhm_enable_all (4 samples, 2.68%)</title><rect x="1118.7" y="165" width="31.7" height="15.0" fill="rgb(235,194,31)" rx="2" ry="2" />
<text  x="1121.72" y="175.5" >in..</text>
</g>
<g >
<title>rebalance_domains (1 samples, 0.67%)</title><rect x="944.5" y="373" width="7.9" height="15.0" fill="rgb(220,203,28)" rx="2" ry="2" />
<text  x="947.50" y="383.5" ></text>
</g>
<g >
<title>group_sched_in (4 samples, 2.68%)</title><rect x="1118.7" y="229" width="31.7" height="15.0" fill="rgb(238,178,47)" rx="2" ry="2" />
<text  x="1121.72" y="239.5" >gr..</text>
</g>
<g >
<title>port_inb (3 samples, 2.01%)</title><rect x="920.7" y="389" width="23.8" height="15.0" fill="rgb(220,206,33)" rx="2" ry="2" />
<text  x="923.74" y="399.5" >p..</text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.67%)</title><rect x="1102.9" y="389" width="7.9" height="15.0" fill="rgb(235,74,41)" rx="2" ry="2" />
<text  x="1105.89" y="399.5" ></text>
</g>
<g >
<title>start_kernel (4 samples, 2.68%)</title><rect x="1158.3" y="437" width="31.7" height="15.0" fill="rgb(222,228,45)" rx="2" ry="2" />
<text  x="1161.32" y="447.5" >st..</text>
</g>
<g >
<title>ktime_get_real (1 samples, 0.67%)</title><rect x="881.1" y="421" width="8.0" height="15.0" fill="rgb(227,89,25)" rx="2" ry="2" />
<text  x="884.14" y="431.5" ></text>
</g>
<g >
<title>do_softirq (4 samples, 2.68%)</title><rect x="73.4" y="373" width="31.6" height="15.0" fill="rgb(212,54,35)" rx="2" ry="2" />
<text  x="76.36" y="383.5" >do..</text>
</g>
<g >
<title>perf_pmu_enable (4 samples, 2.68%)</title><rect x="1118.7" y="197" width="31.7" height="15.0" fill="rgb(240,18,54)" rx="2" ry="2" />
<text  x="1121.72" y="207.5" >pe..</text>
</g>
<g >
<title>call_softirq (1 samples, 0.67%)</title><rect x="944.5" y="421" width="7.9" height="15.0" fill="rgb(242,132,25)" rx="2" ry="2" />
<text  x="947.50" y="431.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (88 samples, 59.06%)</title><rect x="105.0" y="389" width="696.9" height="15.0" fill="rgb(250,146,38)" rx="2" ry="2" />
<text  x="108.03" y="399.5" >generic_smp_call_function_single_interrupt</text>
</g>
<g >
<title>call_function_single_interrupt (4 samples, 2.68%)</title><rect x="1158.3" y="373" width="31.7" height="15.0" fill="rgb(231,26,25)" rx="2" ry="2" />
<text  x="1161.32" y="383.5" >ca..</text>
</g>
<g >
<title>child_rip (1 samples, 0.67%)</title><rect x="944.5" y="469" width="7.9" height="15.0" fill="rgb(237,112,8)" rx="2" ry="2" />
<text  x="947.50" y="479.5" ></text>
</g>
<g >
<title>do_filp_open (1 samples, 0.67%)</title><rect x="1150.4" y="309" width="7.9" height="15.0" fill="rgb(232,61,41)" rx="2" ry="2" />
<text  x="1153.40" y="319.5" ></text>
</g>
<g >
<title>do_execve (1 samples, 0.67%)</title><rect x="1150.4" y="341" width="7.9" height="15.0" fill="rgb(244,73,27)" rx="2" ry="2" />
<text  x="1153.40" y="351.5" ></text>
</g>
<g >
<title>group_sched_in (88 samples, 59.06%)</title><rect x="105.0" y="341" width="696.9" height="15.0" fill="rgb(214,48,50)" rx="2" ry="2" />
<text  x="108.03" y="351.5" >group_sched_in</text>
</g>
<g >
<title>intel_idle (10 samples, 6.71%)</title><rect x="801.9" y="421" width="79.2" height="15.0" fill="rgb(225,129,34)" rx="2" ry="2" />
<text  x="804.95" y="431.5" >intel_idle</text>
</g>
<g >
<title>native_write_msr_safe (82 samples, 55.03%)</title><rect x="136.7" y="245" width="649.4" height="15.0" fill="rgb(254,77,44)" rx="2" ry="2" />
<text  x="139.71" y="255.5" >native_write_msr_safe</text>
</g>
<g >
<title>ipmi_thread (4 samples, 2.68%)</title><rect x="912.8" y="437" width="31.7" height="15.0" fill="rgb(221,72,39)" rx="2" ry="2" />
<text  x="915.82" y="447.5" >ip..</text>
</g>
<g >
<title>rest_init (4 samples, 2.68%)</title><rect x="1158.3" y="421" width="31.7" height="15.0" fill="rgb(245,219,45)" rx="2" ry="2" />
<text  x="1161.32" y="431.5" >re..</text>
</g>
<g >
<title>nfs_lookup_revalidate (1 samples, 0.67%)</title><rect x="1150.4" y="229" width="7.9" height="15.0" fill="rgb(225,188,45)" rx="2" ry="2" />
<text  x="1153.40" y="239.5" ></text>
</g>
<g >
<title>open_exec (1 samples, 0.67%)</title><rect x="1150.4" y="325" width="7.9" height="15.0" fill="rgb(233,146,15)" rx="2" ry="2" />
<text  x="1153.40" y="335.5" ></text>
</g>
</g>
</svg>
